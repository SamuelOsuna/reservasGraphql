type Usuario {
	id: ID!,
	nombre: String,
	email: String,
	contrasena: String,
	restaurante: Int,
	imagen: String,
	telefono: String,
	#reservas: [Reserva]
}

type Restaurante {
	id: ID!,
	mesas: [Mesa],
	reservas: [Reserva],
	nombre: String,
	direccion: String,
	telefono: String,
	imagen: String
}

type Reserva {
	id: ID!,
	usuario: Usuario,
	mesa: Mesa,
	restaurante: Restaurante,
	nombre: String,
	fecha: String,
	fechacreacion: String,
	tipo: String,
	aceptada: Boolean

}

type Mesa {
	id: ID!,
	nmesa: Int,
	comensales: Int,
	imagen: String,
	#restaurante: Restaurante,
}

type Query {
	restaurantes:[Restaurante]
	restaurante(id: ID!):Restaurante

	usuariosPorNombre(nombre:String!):[Usuario]!
	usuario(id: ID!):Usuario

	reservasPorUsuario(id_usuario: ID!): [Reserva]!
	reservasPorRestaurante(id_restaurante: ID!): [Reserva]

	mesasPorRestaurante(id_restaurante: ID!): [Mesa]
}

type Mutation {
	createUsuario(nombre: String!,email: String!,contrasena: String!,imagen: String, telefono: String):Usuario
	deleteUsuario(id: ID!):Boolean
	updateUsuario(id:ID!, nombre: String, email: String, contrasena: String, imagen: String, telefono: String):Usuario

	createReserva(id_usuario: ID!,id_mesa: ID!,id_restaurante: ID!,fecha: String!,tipo: String!): Reserva
	deleteReserva(id: ID!): Boolean
	updateReserva(id: ID!, tipo: String, aceptada: Boolean): Reserva

	createMesa(id_restaurante: ID!, nmesa: Int!, comensales: Int, imagen: String): Mesa
	deleteMesa(id: ID!): Boolean
	updateMesa(id: ID!, nmesa: Int, comensales: Int, imagen: String): Mesa
}

type Subscription {
	onReservaAdd(id_restaurante: ID!):Reserva
	onReservaUpdate(id_usuario: ID!):Reserva
}